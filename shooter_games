#создай тут фоторедактор Easy Editor!
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QApplication, QWidget, 
    QPushButton, QVBoxLayout, QHBoxLayout, 
    QListWidget, QLabel, QFileDialog)
import os
from PyQt5.QtGui import QPixmap
from PIL import Image
from PIL import ImageFilter
from PIL import ImageEnhance



app = QApplication([])
easy_win = QWidget()
easy_win.setWindowTitle('Easy Editor')
easy_win.resize(700,400)

btn_dir = QPushButton('Папка')
btn_right = QPushButton('Вправо')
btn_left = QPushButton('Влево')
btn_bw = QPushButton('Ч/Б')
btn_blur = QPushButton('Резкость')
btn_mirror = QPushButton('Зеркало')
btn_color = QPushButton('анти_Ч/б')
list_pic = QListWidget()
lbl_pic = QLabel('Картинка')

main_layout = QHBoxLayout()
col1_layout = QVBoxLayout()
col2_layout = QVBoxLayout()
adv_layout = QHBoxLayout()

col1_layout.addWidget(btn_dir)
col1_layout.addWidget(list_pic)
col2_layout.addWidget(lbl_pic, 95)
col2_layout.addLayout(adv_layout)
adv_layout.addWidget(btn_left)
adv_layout.addWidget(btn_right)
adv_layout.addWidget(btn_blur)
adv_layout.addWidget(btn_mirror)
adv_layout.addWidget(btn_bw)
main_layout.addLayout(col1_layout, 20)
main_layout.addLayout(col2_layout,80)

easy_win.setLayout(main_layout)

workdir = ""
def chooseWorkDir():
    global workdir
    workdir = QFileDialog.getExistingDirectory()

def filter(files, extensions):
    result = []
    for file in files:
        for ext in extensions:
            if file.endswith(ext):
                result.append(file)
    return result

def showFilenamesList():
    chooseWorkDir()
    files = os.listdir(workdir)
    extentions = ['.jpg','.png','.bmp','.jpeg','.gif']
    pic_list = filter(files, extentions)
    list_pic.clear()
    for pic in pic_list:
        list_pic.addItem(pic)

btn_dir.clicked.connect(showFilenamesList)

class ImageProcessor():
    def __init__(self):
        self.image = None
        self.dir = None
        self.filename = None
        self.save_dir = 'Modifield/'

    def loadImage(self, dir, filename):
        self.dir = dir
        self.filename = filename
        image_path = os.path.join(dir, filename)
        self.image = Image.open(image_path)

    def showImage(self, path):
        lbl_pic.hide()
        pixmap = QPixmap(path)
        w, h =lbl_pic.width(), lbl_pic.height()
        pixmap = pixmap.scaled(w, h, Qt.KeepAspectRatio)
        lbl_pic.setPixmap(pixmap)
        lbl_pic.show()

    def saveImage(self):
        path = os.path.join(workdir, self.save_dir)
        if not(os.path.exists(path) or os.path.isdir(path)):
            os.mkdir(path)
        image_path = os.path.join(path, self.filename)
        self.image.save(image_path)

    def do_bw(self):
        self.image = self.image.convert('L')
        self.saveImage()
        image_path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(image_path)

    def do_left(self):
        self.image = self.image.rotate(90)
        self.saveImage()
        image_path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(image_path)

    def do_right(self):
        self.image = self.image.rotate(-90)
        self.saveImage()
        image_path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(image_path)

    def do_blur(self):
        self.image = self.image.filter(ImageFilter.BLUR)
        self.saveImage()
        image_path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(image_path)

    def do_mirror(self):
        self.image = self.image.transpose(Image.FLIP_LEFT_RIGHT)
        self.saveImage()
        image_path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(image_path)

workImage = ImageProcessor()
btn_bw.clicked.connect(workImage.do_bw)
btn_left.clicked.connect(workImage.do_left)
btn_right.clicked.connect(workImage.do_right)
btn_blur.clicked.connect(workImage.do_blur)
btn_mirror.clicked.connect(workImage.do_mirror)

def showChosenImage():
    if list_pic.currentRow() >= 0:
        filename = list_pic.currentItem().text()
        workImage.loadImage(workdir, filename)
        image_path = os.path.join(workImage.dir, workImage.filename)
        workImage.showImage(image_path)
        
list_pic.currentRowChanged.connect(showChosenImage)

easy_win.show()
app.exec_()
